import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec

from mpi4py import MPI
import random
import sys
import os
import math

# EJECUTAR
# py RN_2_1.py

"""
BUSQUEDA DE LA MEJOR TASA DE APRENDIZAJE Y NUMERO DE REPETICIONES
"""


def GUI(learning_rate,errores,repeticiones):    
    x=[lr*100 for lr in learning_rate]
    
    # Crear la figura y GridSpec
    fig = plt.figure(figsize=(10, 6))
    gs = GridSpec(2, 1, figure=fig)

    # Grafico 1 (arriba a la izquierda)
    ax1 = fig.add_subplot(gs[0, 0])
    ax1.plot(x, errores, color='b', linestyle='-')    
    ax1.set_xlabel('Learning Rate (%)')
    ax1.set_ylabel('Errores')
    ax1.set_title('Mejores')
    ax1.grid(True)

    # Grafico 2 (abajo a la izquierda)
    ax2 = fig.add_subplot(gs[1, 0])
    ax2.plot(x, repeticiones, color='b', linestyle='-')     
    ax2.set_xlabel('Learning Rate (%)')
    ax2.set_ylabel('Repeticiones')
    ax2.set_title('Mejores')
    ax2.grid(True)

        
    
    plt.tight_layout() # Ajustar la disposición de los subplots    
    plt.show() # Mostrar los gráficos


# Le pasas una array de float y calcula el valor minimo y su indice (numero de repeticiones)
def minimo_val(fila):
    ret=float("inf")
    index=-1
    n=len(fila)
    for i in range(n):
        if ret>fila[i]: 
            ret=fila[i]
            index=i
    return ret, index

def lee(archivo):
    dir=os.getcwd()
    n=len(dir)

    while(dir[n-3]!='T' and dir[n-2]!='F' and dir[n-1]!='G'):
        dir=os.path.dirname(dir)
        n=len(dir)

    if archivo==None: archivo=input("Introduce un nombre del fichero: ")    
    path=os.path.join(dir,".otros","ficheros","4_RedNeu", archivo+".txt")

    with open(path, 'r') as file:
        content = file.read()

    array = []

    # Quita " " "," "[" y "]. Y divide el archivo     
    datos = content.replace('[', '').replace(']', '').split(', ')      
    for i in range(0, len(datos), 3):
        altura=float(datos[i])
        peso=float(datos[i+1])
        IMC=float(datos[i+2])

        array.append([altura,peso,IMC])

    #print("\n",array)        
    
    return array


# Normalizar los datos de altura y peso
def normalizar_dato(val,m,M):
    return (val-m)/(M-m)
# Desnormalizar el IMC
def desnormalizar_dato(val,m,M):
    return val*(M-m)+m

"""# Normalizar los datos de altura y peso
def normalizar_muchos_datos(vals,m,M):
    n=len(vals)
    return [(vals[i]-m[i])/(M[i]-m[i]) for i in range(n)]
# Desnormalizar el IMC
def normalizar_muchos_datos(vals,m,M):
    n=len(vals)
    return [vals[i]*(M[i]-m[i])+m[i] for i in range(n)]"""


# Funcion de activacion
def sigmoide(x):
    return 1/(1+math.exp(-x))
#Derivada (para el entrenamiento)
def sigmoide_derivado(x):
    return x*(1-x)


class RedNeuronal:
    def __init__(self, tam_entrada, tam_capas_ocultas, tam_salida, pesos):
        self.tam_entrada=tam_entrada
        self.tam_capas_ocultas=tam_capas_ocultas
        self.tam_salida=tam_salida
        
        self.capas=[tam_entrada]+tam_capas_ocultas+[tam_salida]
        
        if pesos==None: # Inicializar los pesos de manera aleatoria            
            self.pesos=[]
            for i in range(len(self.capas)-1):
                pesos_capa = [[random.uniform(-1, 1) for _ in range(self.capas[i + 1])] for _ in range(self.capas[i])]
                self.pesos.append(pesos_capa)
            
            print(self.pesos)
        else: self.pesos=pesos
        
        

    # Propagación hacia adelante (forward propagation)
    def forward(self,entrada):
        self.salidas=[entrada]
        # Recorre todas las capas (menos la de salida) 
        for i in range(len(self.capas)-1):
            entradas_capa=self.salidas[-1]
            salidas_capa=[0 for _ in range(self.capas[i+1])]
            # Recorre todos los nodos de la capa siguiente
            for j in range(self.capas[i+1]):    
                suma=0
                # Suma todos los nodos de la capa actual con los pesos
                for k in range(self.capas[i]):            
                    suma+=entradas_capa[k]*self.pesos[i][k][j]
                salidas_capa[j]=sigmoide(suma) # Aplica funcion de activacion
            
            self.salidas.append(salidas_capa)
        
        # Devuelve el ultimo elemento        
        return self.salidas[-1] 

    # Retropropagación (backpropagation)
    def entrenar(self, entrada, etiqueta, learning_rate):
        self.forward(entrada)
        errores=[]
        for i in range(self.tam_salida):
            errores.append((etiqueta[i]-self.salidas[-1][i])*sigmoide_derivado(self.salidas[-1][i]))
                        
        # Recorre todas las capas (menos la de entrada) en orden inverso
        for i in range(len(self.capas) - 2, -1, -1):
            nuevos_errores=[0 for _ in range(self.capas[i])]
            # Recorre todos los nodos de la capa actual
            for j in range(self.capas[i]):
                suma=0
                # Suma todos los nodos de la capa siguiente (sin orden inverso, es decir, la derecha)
                for k in range(self.capas[i+1]):            
                    suma+=errores[k]*self.pesos[i][j][k]
                nuevos_errores[j]=suma*sigmoide_derivado(self.salidas[i][j])

                # Actualiza los nodos
                for k in range(self.capas[i+1]):
                    self.pesos[i][j][k]+=learning_rate*errores[k]*self.salidas[i][j]

            errores = nuevos_errores

def main():
    # (altura, peso, IMC)
    """datos_entrenamiento = [ [1.70, 60, 20.8],
                            [1.80, 90, 27.8],
                            [1.65, 55, 20.2],
                            [1.55, 70, 29.1],
                            [1.90, 100, 27.6],
                            [1.75, 65, 21.2],
                            [1.60, 50, 19.5],
                            [1.85, 80, 23.4],]"""
    datos_entrenamiento=lee("datos80")
    #datos_entrenamiento=lee("datos2042")    
    
    
    # (altura, peso)
    datos_prueba=[[1.52, 53.0, 22.94], [1.58, 72.0, 28.84], [1.92, 101.0, 27.4], [1.62, 66.0, 25.15], [1.96, 97.0, 25.25], [1.77, 70.0, 22.34], [1.8, 70.0, 21.6], [1.78, 61.0, 19.25], [1.72, 82.0, 27.72], [1.66, 67.0, 24.31], [1.59, 65.0, 25.71], [1.72, 77.0, 26.03], [1.62, 76.0, 28.96], [1.6, 62.0, 24.22], [1.92, 93.0, 25.23], [1.93, 70.0, 18.79], [1.68, 84.0, 29.76], [1.73, 57.0, 19.05], [1.98, 80.0, 20.41], [1.69, 61.0, 21.36], [1.69, 85.0, 29.76], [1.9, 107.0, 29.64], [1.87, 91.0, 26.02], [1.9, 106.0, 29.36], [1.75, 56.0, 18.29], [1.69, 74.0, 25.91], [1.69, 66.0, 23.11], [1.58, 70.0, 28.04], [1.78, 62.0, 19.57], [1.81, 66.0, 20.15], [1.94, 103.0, 27.37], [1.94, 85.0, 22.58], [1.83, 68.0, 20.31], [1.8, 98.0, 30.25], [1.54, 53.0, 22.35], [1.97, 70.0, 18.04], [1.8, 81.0, 25.0], [1.57, 65.0, 26.37], [1.7, 80.0, 27.68], [1.98, 103.0, 26.27], [1.77, 77.0, 24.58], [1.66, 76.0, 27.58], [1.71, 90.0, 30.78], [1.97, 106.0, 27.31], [1.99, 102.0, 25.76], [1.64, 60.0, 22.31], [1.75, 76.0, 24.82], [1.68, 76.0, 26.93], [1.86, 92.0, 26.59], [1.8, 73.0, 22.53]]
    
    datos_prueba_tam=len(datos_prueba)
    # peso[Kg]/altura^2[m]
    datos_prueba_IMC=[(datos_prueba[i][1]/datos_prueba[i][0]**2) for i in range(datos_prueba_tam)]

    # ----------------------------------------------------------------------------------------
    # --- Normalizar los datos ---------------------------------------------------------------
    # ----------------------------------------------------------------------------------------

    alturasD=[data[0] for data in datos_entrenamiento]
    pesosD=[data[1] for data in datos_entrenamiento]
    imcsD=[data[2] for data in datos_entrenamiento]

    alturaD_min=min(alturasD)
    alturaD_max=max(alturasD)
    pesoD_min=min(pesosD)
    pesoD_max=max(pesosD)
    imcD_min=min(imcsD)
    imcD_max=max(imcsD)

    datos_entrenamiento_normalizados = [
        [normalizar_dato(data[0], alturaD_min, alturaD_max), 
         normalizar_dato(data[1], pesoD_min, pesoD_max), 
         normalizar_dato(data[2], imcD_min, imcD_max)]
        for data in datos_entrenamiento]
    

    datos_prueba_normalizados = [
            [normalizar_dato(data[0], alturaD_min, alturaD_max), 
            normalizar_dato(data[1], pesoD_min, pesoD_max),
            normalizar_dato(data[2], imcD_min, imcD_max)]
            for data in datos_prueba]
    
    # ----------------------------------------------------------------------------------------
    # --- Definir la red neuronal ------------------------------------------------------------
    # ----------------------------------------------------------------------------------------

    tam_entrada=2               # Entrada: Altura y peso
    tam_capas_ocultas=[20 for _ in range(3)]   # Tamaño de las capas ocultas (ejemplo)
    tam_salida=1                # Salida: IMC
    
    #5x1
    #pesos=[[[-0.8862127498365708, 0.044455804130351106, -0.24315451980692337, 0.5944257250911558, -0.8659641504083082], [-0.12964407937954947, -0.5388623969967568, 0.9305994808483475, 0.6820897761878244, 0.45941731041235445]], [[-0.6545128025905118], [-0.980373941703389], [-0.7317483501902959], [-0.9176893589970425], [0.7127493647202121]]]
    #10x2
    pesos=[[[0.4821283767852558, -0.8670337444527509, -0.9755289158357843, -0.5513496677067842, -0.9100675507226517, 0.8658981619925499, -0.8169063803638021, -0.587816837618965, -0.20326771447060876, 0.4928531141447867], [-0.9175906750408878, 0.6499607773456646, 0.8409131017926081, -0.842989153599915, -0.10748513054708808, -0.09003904020645992, 0.7121378454240117, 0.07004318012503741, -0.8243179439618515, -0.7365103148443821]], [[-0.4511244742790661, 0.9839689297080676, -0.7934252854264692, 0.5205149513371647, -0.17273591894222373, -0.39697382800130065, 0.0180206980801616, -0.09830858993896929, -0.7421601756868776, 0.6209282254229349], [0.191788035576683, 0.5265693120856147, 0.514565279147986, -0.4596093991726029, -0.8162028088096185, -0.04261886664127368, 0.8169393971185217, -0.34718289511609535, -0.17055884363899154, 0.7333523568705407], [0.8996545035865737, 0.09294882697219631, -0.6835423672643388, -0.010904635722831513, 0.3414763156327163, 0.18029462132414298, 0.9089088088550412, 0.19091484373482537, 0.32190413080160263, -0.7746961350554031], [0.9005090689714641, 0.9006970090351336, -0.17632813770451627, 0.5820715289726057, 0.5426051164308063, -0.8789323942891538, 0.6204807935372756, 0.2604996029504343, 0.5046032534350962, 0.2304831980624804], [-0.10718545259131718, 0.6946169516047398, -0.5924168551155276, -0.29152763473368837, 0.9517418054666338, 0.3875299371628049, 0.1291572145316482, -0.4221833998554847, -0.39879328144509874, -0.4404235857010277], [0.24771981887979244, 0.711363395253469, -0.302140748326307, 0.2463248529712787, 0.5572204173564301, -0.17969665130749268, 0.34657732660954443, 0.4570854754174716, 0.14850678458111566, 0.9486971921677416], [0.8875041171836562, -0.1739539898597684, -0.4350854638787791, -0.2167443698257263, 0.013334466272177936, -0.4323695662887814, 0.9841044588638381, -0.5882400702668433, 0.5997859287141531, -0.6825555930863951], [0.5296343188967321, -0.24964817801313166, 0.5504608455177276, 0.5150198126657402, -0.7899379727434743, -0.7821251263542741, 0.8446627854238622, 0.23336886811986512, -0.3086252851321538, 0.6038999544594503], [-0.8133978101254902, -0.08498118186094006, 0.01759989464329781, 0.8945387174972843, -0.15342522522840185, 0.050775384322829575, -0.24732161281830445, 0.8280715743272362, 0.6707945542800817, -0.9075050484557181], [-0.13900893471102882, -0.23039175756426533, 0.04771114438942203, 0.8530642324854458, 0.8326146777900427, -0.4480414555743253, -0.341748886565721, 0.1350345527105561, 0.2626367905617033, 0.9888345281425073]], [[0.38392734580429155], [-0.7360176269503829], [-0.32968169116940405], [0.7340656840163466], [-0.08919713022151443], [0.724458112440715], [-0.8137123050825346], [0.466215531284335], [-0.8332176399819757], [0.7348121645308592]]]
    #20x3
    pesos=[[[-0.70728156522769, -0.06758749867226799, -0.2115472729267449, -0.13411288207500593, -0.48033176364761854, 0.7394689764254199, -0.6549966877298472, -0.17987911305929316, -0.8077741062104828, 0.8748298219356112, -0.22378995496516718, -0.8710034093716472, 0.47154388346372245, -0.6822538241379452, -0.4230018135913034, -0.6815897937136672, -0.7281038523612078, 0.05994436855720009, 0.4348326032170158, -0.6285204350179279], [0.3505743722169372, 0.23401099690516736, -0.2363015469701948, 0.27491602434710805, 0.8344959725699828, -0.7602140952570116, -0.1423863856810279, 0.42985476764187314, -0.12291604286795521, -0.8769826605222353, -0.8801328757717053, 0.9518387848774073, 0.27768835577854745, 0.18855126584635795, -0.3759191148179146, 0.3529039280178625, -0.4262660575449597, 0.8981425581027966, -0.4844613866409364, 0.35844513107525033]], [[0.3844505907341038, -0.6168588401048456, 0.9951135066735401, -0.22979202544803945, -0.5789752159018706, -0.5543309582023943, -0.510808351818971, -0.2245341802952614, 0.3773547886149222, 0.40066547415429987, 0.5569263639047022, 0.2610649254773796, 0.07096722739637129, 0.943470131128961, -0.857671894288057, -0.6754116596853712, 0.19199924992534245, -0.18840114563484955, -0.02452918165218998, 0.8172334035229798], [-0.7280663887938461, -0.2161792165335752, 0.9690903860274982, 0.4492546303067422, 0.644442371386533, 0.43627589691674973, -0.6987918716336434, -0.012369921010851215, 0.014047278874615543, 0.8924837573686291, 0.7452911178878805, 0.6687935949152211, 0.1903432718261422, 0.5579971226994447, 0.019929217486728268, 0.2953841295018296, -0.5513971261505599, 0.8047794734795517, 0.7572462895258241, 0.3757084354913043], [-0.6413329148068565, -0.08391375303783644, 0.6953145262482685, -0.08617086719857547, 0.9643533888149434, 0.9718778554852987, -0.9068573317869535, 0.3836620351758764, 0.513581703869876, -0.23730485531934886, -0.8874473296412135, 0.8894803842267662, -0.7044028725690816, 0.8259044998665377, 0.29898144667978066, 0.7354401011630411, -0.8565827872731586, -0.41529577462523193, 0.6180061242282011, 0.03950342570994603], [0.1448339359412838, -0.20999497553676538, 0.8302029473217762, 0.33409273364555325, 0.7377954359346044, 0.2677889318490274, 0.1471535252969447, -0.4177153318411859, 0.6198060669767813, -0.2631357746798091, 0.051852524890535046, -0.6810105193401665, 0.6168629348072161, 0.43419266430446823, 0.8933938146131599, -0.8514987416600774, 0.9385922998623271, 0.8744806632923634, -0.4460849020160167, 0.3094872765545458], [-0.8278258420722922, 0.5716719285110403, 0.5067128964401377, 0.2742119901108264, 0.6705934906106339, 0.46963591698996776, 0.2758403883638467, -0.8763035585526602, 0.40472612180731704, 0.9738743987869352, 0.8668582704240528, 0.2889590803312503, -0.41092662109987255, 0.7997986451825598, 0.6153256516533927, -0.47447852085885334, -0.3373290847882835, -0.35987143248300946, -0.39040143760469337, 0.18585356910166695], [-0.700128109782266, -0.8200911701907565, 0.10731992799069068, 0.6518425944821427, -0.9799222597372692, -0.4063392982968459, 0.2175111989043479, 0.6173882424715247, -0.5199365604644901, -0.9275658181141824, 0.46969454779293973, -0.2412489518472043, 0.8841422466835402, 0.5296078453830642, 0.5579411530922949, -0.4518727500638817, 0.7631463050470306, -0.8021003717459201, 0.5920344322747864, -0.0660345567338041], [0.6175063380896686, 0.8242638082005711, 0.6468589272583489, 0.8013093878831801, -0.31792518983962914, 0.8810293928170907, 0.4323850576169974, 0.8402450188407016, -0.2783423938512142, -0.8246360573949114, -0.5482312639781237, 0.4841977641734121, -0.07434904182790292, 0.1287685123286768, -0.9671677214714893, 0.8703330301869789, -0.4004229341376766, 0.6292039489093564, -0.5355597009594546, 0.7995527023243869], [-0.30329625497361645, -0.17797002587283806, -0.06383289047457597, 0.1670617171770732, -0.7174982813980435, -0.972335379896998, 0.9720200537142003, 0.49090567992977685, -0.030808141556696977, -0.18828857239362207, -0.07488139724192289, 0.13330902740905848, -0.553395920234365, 0.926453476601468, 0.44150676490778906, 0.4380381521367209, -0.03377445169606119, 0.07349424537570459, -0.983304495484661, 0.9454342810280632], [0.33338025062679977, 0.6518980645717645, 0.9344633522295014, 0.021377373746423123, 0.007123214999959604, 0.7108122280480407, -0.8849605295536629, -0.501289149795505, 0.1863959650631053, 0.6915247720583608, 0.94354993119939, 0.9731622743308894, 0.27930024899126127, 0.7724908794328225, 0.8385618255579648, -0.22482344460003167, 0.3766392413320321, 0.8678225889275211, 0.7795880366529422, -0.4868561601791992], [-0.8127367726177155, 0.8842783526855116, -0.09773742001351748, 0.36864432063566976, -0.1730383210514137, 0.7455747050283394, 0.917427126122305, 0.794258442140449, 0.22555907856683355, 0.7369966210679253, -0.4856281013446677, -0.025120253351138988, 0.9789926460781855, 0.47345759043013147, -0.36589434419101896, 0.2897848838204753, -0.42185630430086785, -0.5512827447475943, -0.7282500844120112, -0.21817360891508275], [0.01861565331759274, -0.9356143308756246, -0.3657949301595096, -0.17402497556526675, -0.3501933052270998, 0.6978076109518714, -0.6654297403031244, 0.8273744744032336, 0.4933633821581018, 0.3298206343739132, 0.30809962473511776, 0.29802932133800963, 0.4864802837200426, 0.18220753107025778, 0.041227884820027816, -0.6025127099414689, -0.5591983076535474, -0.21820092295943172, 0.7871253336497563, -0.31605304487373975], [0.22501736768811997, 0.7970043810371699, -0.7684808425917891, -0.06236649562242236, 0.29002253344793205, 0.7643779950757081, 0.49185954912298646, -0.3714834856910263, -0.861227987197964, -0.8365204438586371, -0.6928786918915946, -0.5544203111033075, 0.6525734317868399, -0.8303705429697021, -0.03747168881651097, -0.3598721935760356, -0.3488282719298199, 0.9927945121494686, -0.5621148823227022, 0.284029704527643], [-0.19217358344297297, 0.8336345081375933, 0.6915120720378574, 0.6021225551627387, 0.2677951867466546, -0.5684397516138417, 0.5447393940975649, 0.12121987830906411, -0.9439622283744709, 0.05444344226935982, -0.005767080676948089, 0.46851472455199605, -0.36348111530571203, 0.6747551721713267, 0.7208902730816076, 0.38773117311534677, -0.8145923915112787, 0.13698671390184858, -0.05012052872551398, 0.6712524493060346], [0.45249895188114087, 0.4262220222784885, 0.5400449882032134, -0.40284098621507947, -0.5464545103435556, -0.7435192308916447, 0.723172432639424, -0.7211561962616411, 0.394800535593127, -0.43498633140450593, -0.6123886729232222, 0.6584376018983138, -0.1933844329391572, 0.23909733154566037, -0.5705244701219103, 0.7767826429754254, 0.19258931808233548, -0.9230811072757739, -0.49780105229931415, -0.1325375343167876], [0.9149915318883772, -0.46934623299941625, -0.29386223016873925, -0.9469264932130317, -0.6179201930229823, 0.38390153764959023, 0.47579071156932695, 0.20479747442404905, 0.9326580202741346, 0.9752030719920668, -0.09396124593311361, 0.9484038847992988, 0.08531338979831471, -0.0160916787953429, 0.2908698141359307, -0.9274731438410413, -0.25894265288930485, -0.24272922029548405, 0.07001420179412299, -0.49129108147166645], [0.7599924749386764, -0.44285642261609004, 0.714861596516625, 0.9386152593366237, -0.36361682855003874, -0.5515533638774, 0.1612833183482809, -0.47518512674494895, 0.9551162571426877, 0.9929617891438098, -0.9505447978398789, 0.4748706386567936, -0.25653702353441754, 0.6508977882386213, 0.8084052355391682, -0.9102376178938691, 0.8021064502518997, -0.7846766084373111, -0.7467910776361328, -0.364382534366825], [-0.8394914795193247, 0.9544251308024583, 0.2865726877574908, 0.6850072377243581, -0.7417789224483728, 0.03142955740376063, 0.3475706354869499, -0.7025020746049329, 0.591771549011707, 0.501499415117372, 0.8372244231983903, -0.8334231199426432, 0.9807055140694527, -0.2521989965696312, 0.10748185324688131, 0.8203389429914005, -0.8746037266426481, -0.7869303601541786, 0.9569999761044123, 0.569241887003938], [-0.15128921516851346, 0.568689700893285, -0.0008587940722939447, 0.7657933107477599, -0.4828360153717395, -0.2477179433212935, 0.509453947739563, 0.25152562410682333, 0.6760239954135012, -0.9012128199398908, 0.5103557741336846, -0.6163729610147923, 0.3891343509534091, -0.3638173351646201, 0.3621010820065831, -0.11107187624513615, -0.4490838629614633, -0.21184222038811185, -0.896283955061626, -0.7028964805294797], [0.08708910602395359, 0.78233671091686, -0.5772352513104464, 0.5037861752726966, 0.36685374227352585, 0.565319218830703, 0.3347658337432353, 0.8206636023643903, -0.5202950015519014, 0.9445501759857793, -0.3624693483306376, -0.9899539896961982, -0.6708043014208027, 0.09897982504795477, -0.8701393240872553, -0.6676057043365826, 0.09792350258816818, 0.5518795697688912, 0.6984081638261421, -0.7230070340343846], [0.7735126062638842, 0.8335328718251191, -0.8577606337526689, 0.5198354799542177, 0.35219579240037113, 0.04813037502353423, 0.5984130029600354, 0.007742359460095161, -0.6898589431457649, 0.3830575421239224, 0.9947654628754401, -0.6231289414338361, -0.5322498456368634, 0.09228332442401888, -0.06240298228471852, 0.2282909265761024, 0.46878657127575507, 0.6576115742774951, -0.5963772151403051, -0.5218107885875076]], [[-0.9723310657310382, 0.8700799701320399, 0.36090760905761354, 0.9646672454935312, -0.8358794430804999, 0.10662618140894331, -0.7120421723664214, -0.02016304715800521, 0.0960839836622649, 0.7492518282769345, 0.9866466725091989, -0.3780592273952086, -0.3205538125738565, 0.9483860123004186, -0.79985433192915, 0.04606382703387357, -0.06312655341712636, 0.6276272867642878, 0.4960327310404622, 0.3501054981848073], [-0.6678481081265588, 0.18809425793925327, 0.5749729977954559, 0.8613463180004979, -0.33406576523081477, 0.9527495753251765, 0.6613707830468953, -0.6299817875103906, -0.9866323205655663, -0.0916394023400755, 0.11315449939901878, -0.5218529817529285, 0.9081967766635048, -0.005185885376529864, 0.3431250127961252, 0.3570590924596173, 0.20870488586148372, -0.049138402322151276, 0.8386581702640123, -0.34095483298304763], [0.20827207395873537, -0.6287076907003804, 0.3928777310961695, 0.8887649983546551, -0.9279983483973435, -0.7075874754839759, 0.8276423380907836, 0.2877964494991281, -0.5263211177404123, 0.762029302860366, -0.6687540106514778, -0.02905448440738212, -0.6832603217614475, 0.8524476991796903, -0.8577000357053668, -0.1626446478670085, 0.3309802045915906, 0.6649994598724549, 0.015229640117195853, 0.9634995808472973], [-0.24310875437401736, 0.7125954114365045, -0.8280350835153905, 0.646948528905406, 0.9781394055270567, 0.28824191073932237, -0.185928777057083, 0.36606768844116555, 0.7995844519592574, 0.6813627977655625, -0.5408702088316533, 0.4408410011182107, 0.415062759136245, 0.8129344434537342, -0.20025206484873825, 0.028666071046526076, 0.6349982861296528, 0.20480604885602505, 0.7291133132110361, 0.42584085875209565], [0.3598954987681551, 0.4265011997033199, 0.5410635164564985, 0.691770851017609, -0.7414888926578183, -0.7567027294273374, 0.18542507233705607, 0.4640273141741249, -0.9117474784753974, -0.7805566966563111, -0.6757849684980533, -0.6161955215578796, 0.27412961681952686, -0.30287585232658487, 0.3021805708294041, 0.9319873149010212, -0.993879740155412, 0.1862420566965879, 0.8514774020042502, -0.7025701227782615], [-0.6417383977833926, -0.9428749423697975, 0.7111969787383212, 0.8447465741017666, 0.8331779676513751, -0.9509732581399677, 0.9708438432023734, 0.6087021356334965, -0.38900959480568, 0.06972348447157795, -0.2445459817084179, -0.1917430354513825, 0.4134206484039802, -0.3838787169152509, -0.5792311505063517, 0.6184993724457206, 0.6323919182796622, 0.7291877021130972, -0.6922826178580599, 0.7410253813443157], [-0.17327370543291631, -0.32303884716589426, -0.49110278532581586, -0.5073703324214223, 0.4720752936128516, 0.577510924200834, 0.8674109604686353, 0.8242878437455281, -0.3121284314851285, 0.913025214877945, -0.24174790625773057, 0.09158788714643706, 0.26959633799213245, -0.353605005752075, 0.6698915617253074, -0.396699213127502, -0.09159350894872187, 0.6434764238552819, -0.1525076679002293, -0.977908016352891], [0.6259633368132591, -0.1935543619596234, 0.8114698583190436, -0.8251709096766471, -0.5914726797411844, -0.37858856789744944, -0.8983601315489145, 0.1637113582274854, 0.6658386069381852, 0.006412347121491413, 0.8358402389711685, 0.21120295709497228, -0.36823873425381826, 0.5774769062335428, 0.9297479393440526, 0.5114288658347441, -0.15503264919620818, -0.7690114142093261, 0.22562829590144817, -0.07286036055332401], [0.7050297871898799, -0.30977339425992856, -0.46400854881651976, -0.9803417349411769, -0.9341945009429511, 0.4969866304216284, 0.6507407856355614, -0.919858391723791, 0.7147014318299356, -0.13809710736489555, -0.0351031163951494, -0.8911765458587391, -0.8285682323624153, -0.42932183821648984, 0.8013164975923213, 0.7305933855412681, 0.5898916376179009, 0.5171894901053771, 0.29527349078942344, -0.4915423933644456], [0.7939964153874042, 0.264901882740054, -0.046295159767016925, 0.7152531070207091, 0.8046775761362868, -0.5864943483303471, -0.5175418479970055, 0.42729691063566655, 0.7417442360520659, 0.36910480060814344, 0.44516457973331613, 0.8512768229621686, -0.416599803510473, 0.5594023403117023, 0.40788859921788023, 0.3739390245605607, 0.9280748367217337, 0.4533670762718076, -0.023336001812513274, -0.8280220186650111], [-0.22175879498015494, -0.03822640283209933, -0.47026806597232906, 0.38036746484730855, 0.2724889763324121, 0.2894629205771915, -0.8257269734477781, 0.27030494468103927, -0.5040031310761488, -0.2382060862544706, 0.01925655981063734, 0.8271490628522495, -0.08077796421999772, -0.8521339499721636, 0.6362035036432199, 0.46849981767030835, 0.492807507716992, 0.035228226434058874, 0.678985924020695, -0.8591556806944154], [-0.4462862916797501, 0.059525279303479506, -0.6551532655219581, 0.6004519379890825, -0.5350157060710417, 0.7465332541854315, 0.3177693185313941, 0.24653060276569128, -0.3056333981932, 0.3497953926131203, -0.6373030402675675, 0.24421890926157186, -0.5616435078389737, 0.1835011734353662, 0.5277586135931487, 0.9323499216338218, -0.31002059512028435, -0.15484917000965193, 0.6343195941506274, -0.9456460943037308], [-0.5634522469557002, 0.8158858143132222, -0.5116269418827994, -0.9541666632785637, -0.9781444358995919, 0.7414726009164754, -0.29376552939806677, -0.8003641665378185, 0.8185960117055628, 0.8304308926061543, -0.346226708334213, 0.049742370773521616, 0.9620446009206023, -0.846221445724817, 0.575742513800565, 0.026097218856290905, -0.5343399076394313, -0.14561791847626404, -0.49338730887125193, 0.49890008879169967], [-0.43860495930932486, -0.6100648061556657, -0.1619974558385724, -0.33627908498054504, 0.189933667847199, -0.17029560710727165, -0.21952590339206712, 0.9741246396911505, -0.5629957315441165, -0.6622849324070659, 0.13670336092878488, -0.3485994293349166, 0.42536465695493364, -0.9898515158038153, 0.9441158408191377, 0.4851820805498539, -0.022078159458198243, -0.32788719565128277, 0.6621009690361261, -0.4515483558006421], [0.3328522585354705, 0.5320398334249243, 0.6561305451991102, 0.35902159949469303, -0.6700302498746131, -0.5903431399395052, 0.5201270323631335, 0.6061531700265663, 0.8046854442566294, 0.21564256567147488, 0.5061464228072974, 0.9348077345735559, -0.7361414945416289, -0.15449792761225045, 0.4234232192476002, -0.1984804582196371, -0.9655558945764173, 0.7271758953055232, 0.9721277741796901, -0.5646510445409294], [-0.10243500165232589, -0.8401840318209282, -0.8885534839161895, -0.21576668783278596, -0.9546471595386776, -0.0012640621409907293, 0.2996272447294577, -0.3486127269842021, -0.6505988114037444, -0.3644084261176683, 0.33709431593426853, -0.9151556258333471, 0.7029651802790899, -0.8611612736188223, -0.6830541545620985, 0.6698866545894697, -0.5636260670530353, -0.6849052494553993, 0.8106220877664243, -0.13952448458529743], [0.5266606742365976, 0.2806863220718543, 0.4909901659611067, 0.7828102259854293, -0.5280855071477304, 0.3405695694397246, 0.727666748004782, 0.4400650507125712, 0.08975652803330125, -0.3364106085200982, -0.33825782304656915, 0.5857521885002726, 0.26398576662983264, -0.26505021821894537, -0.6749447964665496, 0.13941622753523197, 0.7615494095468294, -0.4363073458968869, -0.47976301624433204, 0.22213782189022635], [-0.14165863044981597, 0.11924181071998396, 0.8032220299828545, -0.31355197312006733, 0.5883342328391714, -0.26399119855256536, 0.8265575918495502, 0.6005726484171547, 0.48275654302656745, -0.8516592675465973, -0.1903570073127525, -0.2209853689514869, 0.13529739373337835, 0.01961264573595045, 0.7293724995008464, 0.6040397423476112, -0.8165226690119787, -0.9269709406836031, 0.14994011799312745, -0.4173849622719381], [-0.8488545339901403, 0.16730429151629256, 0.32566777730936525, -0.7096848523654935, -0.4589211623005123, -0.734834180283044, -0.6155872143728514, 0.8514794790102529, 0.4354029448340291, -0.16135916153696583, -0.7433706896323526, -0.8125973650369536, -0.7380323021135573, -0.3425423328280903, -0.5190856256776044, 0.31443562320582674, 0.05611633052995657, -0.9572858252481486, -0.4726334693427514, 0.23434446764745176], [-0.20147851579677112, 0.21249056969467284, 0.6438053099137913, 0.24894269329767527, 0.2903212880123287, 0.8060356951098737, 0.6504185789171941, -0.9637293921287902, -0.7678222673686677, 0.18734762214271616, -0.7207171443132361, 0.34997774004969306, -0.8553607394331444, -0.5555724357889382, 0.8739097186410683, 0.7809997741035919, -0.016412967696768588, 0.8269468051753122, -0.12698962883307363, 0.3018770609360695]], [[0.7417733719542019], [0.20462461447874047], [-0.7918364384558727], [0.1345304317033582], [-0.9724674097242596], [-0.8833571275430547], [0.1236715184464372], [0.5331116642457332], [-0.8601904091009052], [0.3242234181583341], [-0.8306871638561659], [0.05943236765685089], [-0.5557340386630403], [-0.7791425490429638], [-0.829790633070556], [-0.9106931955446496], [-0.22195792559800842], [0.9161345520733881], [0.04667911331540808], [-0.9262873202820521]]]
    
    """precision=1
    learning_rate=[]
    learning_rateMax=0.5
    tam=int((learning_rateMax*100))        
    izq=1
    
    while izq<=tam:
        learning_rate.append(izq/100)
        izq+=precision  """
    learning_rate=[0.01*i for i in range(1,21)]
    
    repeticiones_maximas=100             # Numero de repeticiones en el entrenamiento

    print("Tamaños de las capas ocultas: {}, numero de repeticiones: {}".format(tam_capas_ocultas, repeticiones_maximas))
    
    timeStart=MPI.Wtime()

    M=[]
    errores=[]
    repeticiones=[]
    
    for tasa in learning_rate:
        fila=[]
        

        RedN=RedNeuronal(tam_entrada,tam_capas_ocultas,tam_salida, pesos)
        
        for _ in range(repeticiones_maximas):
            for data in datos_entrenamiento_normalizados:                    
                entrada=data[:2]
                etiqueta=[data[2]]
                RedN.entrenar(entrada,etiqueta,tasa)
            
            fallo=0
            for data in datos_prueba_normalizados:
                prediccion=RedN.forward(data[0:2])      
                fallo+=abs(prediccion[0]-data[2])                
            fila.append(fallo)

        M.append(fila)

        err, rep=minimo_val(fila)
        errores.append(err)
        repeticiones.append(rep)

    timeEnd=MPI.Wtime()
    print("Tiempo de Entrenamiento: {}s\n".format(timeEnd-timeStart))

    GUI(learning_rate, errores, repeticiones)
           

    

    


main()
